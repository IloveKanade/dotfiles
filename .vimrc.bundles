" === vundle ===
" ==========================================
" bundle 插件管理和配置项
" ==========================================

"------------------------------------------- begin of configs --------------------------------------------

" ################### 包依赖 #####################
" package dependence:  ctags, ag(he_silver_searcher)
" python dependence:   pep8, pyflake

" 非兼容vi模式。去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限
set nocompatible
filetype off " required! turn off
set rtp+=~/.vim/bundle/Vundle.vim

" ################### 插件管理 ###################
" ----------------------------------------------------------------------------
" 使用 vim-plug 管理插件
" vim plugin bundle control, command model
" ----------------------------------------------------------------------------

call plug#begin('~/.vim/bundle')

Plug 'VundleVim/Vundle.vim'
Plug 'tpope/vim-fugitive'
Plug 'kien/ctrlp.vim'
if executable("ag")
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_use_caching = 0
endif
autocmd Filetype go let g:ctrlp_custom_ignore='\vvendor[\/]'

Plug 'vim-scripts/fish-syntax'
Plug 'dracula/vim'
Plug 'flazz/vim-colorschemes'

" Ctrl Space
Plug 'vim-ctrlspace/vim-ctrlspace'
if has('nvim')
    nnoremap <c-space> :CtrlSpace<CR>
endif
" let g:CtrlSpaceDefaultMappingKey = "<C-space>"
if executable("ag")
    let g:CtrlSpaceGlobCommand = 'ag -l --nocolor -g ""'
endif

" 多语言语法检查
Plug 'w0rp/ale'
function! LinterStatus() abort
    let l:counts = ale#statusline#Count(bufnr(''))

    let l:all_errors = l:counts.error + l:counts.style_error
    let l:all_non_errors = l:counts.total - l:all_errors

    return l:counts.total == 0 ? 'OK' : printf(
    \   '%dW %dE',
    \   all_non_errors,
    \   all_errors
    \)
endfunction
set statusline=%{LinterStatus()}

" ################### 自动补全 ###################
" 代码自动补全
"迄今为止用到的最好的自动VIM自动补全插件
"重启 :YcmRestartServer
Plug 'Valloric/YouCompleteMe'
"youcompleteme  默认tab  s-tab 和自动补全冲突
" let g:ycm_key_list_select_completion=['<c-j>']
" let g:ycm_key_list_previous_completion=['<c-k>']
let g:ycm_complete_in_comments = 1  "在注释输入中也能补全
let g:ycm_complete_in_strings = 1   "在字符串输入中也能补全
let g:ycm_use_ultisnips_completer = 1 "提示UltiSnips
let g:ycm_collect_identifiers_from_comments_and_strings = 1   "注释和字符串中的文字也会被收入补全
let g:ycm_collect_identifiers_from_tags_files = 1

" 关闭文档预览
set completeopt-=preview

let g:ycm_seed_identifiers_with_syntax=0   "语言关键字补全

" 跳转到定义处
" let g:ycm_goto_buffer_command = 'horizontal-split'
let g:ycm_goto_buffer_command = 'new-tab'  "在新标签中打开跳转
"nnoremap <leader>jd :YcmCompleter GoToDefinition<CR>
nnoremap <leader>jd :YcmCompleter GoToDefinitionElseDeclaration<CR>
nnoremap <leader>gd :YcmCompleter GoToDeclaration<CR>

" 引入，可以补全系统，以及python的第三方包 针对新老版本YCM做了兼容
" old version
if !empty(glob("~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/cpp/ycm/.ycm_extra_conf.py"
endif
" new version
if !empty(glob("~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"))
    let g:ycm_global_ycm_extra_conf = "~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py"
endif

" 直接触发自动补全 insert模式下
" let g:ycm_key_invoke_completion = '<C-Space>'
" 黑名单,不启用
let g:ycm_filetype_blacklist = {
      \ 'tagbar' : 1,
      \ 'gitcommit' : 1,
      \}

" Ultimate Snippet
" " Track the engine.
Plug 'SirVer/ultisnips'

" Snippets are separated from the engine. Add this if you want them:
Plug 'honza/vim-snippets'

" Trigger configuration. Do not use <tab> if you use https://github.com/Valloric/YouCompleteMe.
let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" If you want :UltiSnipsEdit to split your window.
let g:UltiSnipsEditSplit="vertical"

" 自动补全单引号，双引号等
Plug 'Raimondi/delimitMate'

"" for python docstring ",优化输入
au FileType python let b:delimitMate_nesting_quotes = ['"']
" 关闭某些类型文件的自动补全
"au FileType mail let b:delimitMate_autoclose = 0


" 自动补全html/xml标签
Plug 'docunext/closetag.vim'
let g:closetag_html_style=1


" ################### 快速选中 ###################
" 选中区块
Plug 'terryma/vim-expand-region'
" map + <Plug>(expand_region_expand)
" map _ <Plug>(expand_region_shrink)
vmap v <Plug>(expand_region_expand)
vmap V <Plug>(expand_region_shrink)

" 多光标选中编辑
Plug 'terryma/vim-multiple-cursors'
let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_next_key='<C-m>'
let g:multi_cursor_prev_key='<C-p>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='<Esc>'

" ################### 快速编码 ###################

" 快速注释
Plug 'scrooloose/nerdcommenter'
let g:NERDSpaceDelims=1

" 快速加入修改环绕字符
Plug 'tpope/vim-surround'
" for repeat -> enhance surround.vim, . to repeat command
Plug 'tpope/vim-repeat'

" 快速去行尾空格 [, + <Space>]
Plug 'bronson/vim-trailing-whitespace'
map <leader><space> :FixWhitespace<cr>

" 快速赋值语句对齐
Plug 'junegunn/vim-easy-align'
vmap <leader>a <Plug>(EasyAlign)
nmap <leader>a <Plug>(EasyAlign)
if !exists('g:easy_align_delimiters')
  let g:easy_align_delimiters = {}
endif
let g:easy_align_delimiters['#'] = { 'pattern': '#', 'ignore_groups': ['String'] }

" 同git diff,实时展示文件中修改的行
" 只是不喜欢除了行号多一列, 默认关闭,gs时打开
Plug 'airblade/vim-gitgutter'
let g:gitgutter_map_keys = 0
let g:gitgutter_enabled = 0
let g:gitgutter_highlight_lines = 1
nnoremap <leader>gs :GitGutterToggle<CR>

" ################### 显示增强 ###################

" 状态栏增强展示
" 新的airline配置
Plug 'bling/vim-airline'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
" let g:airline_left_sep = '▶'
" let g:airline_left_alt_sep = '❯'
" let g:airline_right_sep = '◀'
" let g:airline_right_alt_sep = '❮'
" let g:airline_symbols.linenr = '¶'
" let g:airline_symbols.branch = '⎇'
" 是否打开tabline
" let g:airline#extensions#tabline#enabled = 1

" Buffer line
"Plug 'bling/vim-bufferline'


" 括号显示增强
Plug 'kien/rainbow_parentheses.vim'
" 不加入这行, 防止黑色括号出现, 很难识别
" \ ['black',       'SeaGreen3'],
let g:rbpt_colorpairs = [
    \ ['brown',       'RoyalBlue3'],
    \ ['Darkblue',    'SeaGreen3'],
    \ ['darkgray',    'DarkOrchid3'],
    \ ['darkgreen',   'firebrick3'],
    \ ['darkcyan',    'RoyalBlue3'],
    \ ['darkred',     'SeaGreen3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['brown',       'firebrick3'],
    \ ['gray',        'RoyalBlue3'],
    \ ['darkmagenta', 'DarkOrchid3'],
    \ ['Darkblue',    'firebrick3'],
    \ ['darkgreen',   'RoyalBlue3'],
    \ ['darkcyan',    'SeaGreen3'],
    \ ['darkred',     'DarkOrchid3'],
    \ ['red',         'firebrick3'],
    \ ]

let g:rbpt_max = 16
let g:rbpt_loadcmd_toggle = 0
au VimEnter * RainbowParenthesesToggle
au Syntax * RainbowParenthesesLoadRound
au Syntax * RainbowParenthesesLoadSquare
au Syntax * RainbowParenthesesLoadBraces

" ################### 快速导航 ###################
"目录导航
Plug 'scrooloose/nerdtree'
map <leader>n :NERDTreeToggle<CR>
let NERDTreeHighlightCursorline=1
let NERDTreeIgnore=[ '\.pyc$', '\.pyo$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.svn$', '^\.hg$' ]
"close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | end
" s/v 分屏打开文件
let g:NERDTreeMapOpenSplit = 's'
let g:NERDTreeMapOpenVSplit = 'v'


Plug 'jistr/vim-nerdtree-tabs'
map <Leader>n <plug>NERDTreeTabsToggle<CR>
" 关闭同步
"let g:nerdtree_tabs_synchronize_view=0
"let g:nerdtree_tabs_synchronize_focus=0
" 自动开启nerdtree
"let g:nerdtree_tabs_open_on_console_startup=1

" 标签导航
Plug 'majutsushi/tagbar'
nmap <F9> :TagbarToggle<CR>
let g:tagbar_sort = 0
let g:tagbar_autofocus = 1
" for ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" go语言的tagbar配置
" 1. install gotags 'go get -u github.com/jstemmer/gotags'
" 2. make sure `gotags` in you shell PATH, you can call check it with `which gotags`
" for gotags. work with tagbar
" let g:tagbar_type_go = {
    " \ 'ctagstype' : 'go',
    " \ 'kinds'     : [
        " \ 'p:package',
        " \ 'i:imports:1',
        " \ 'c:constants',
        " \ 'v:variables',
        " \ 't:types',
        " \ 'n:interfaces',
        " \ 'w:fields',
        " \ 'e:embedded',
        " \ 'm:methods',
        " \ 'r:constructor',
        " \ 'f:functions'
    " \ ],
    " \ 'sro' : '.',
    " \ 'kind2scope' : {
        " \ 't' : 'ctype',
        " \ 'n' : 'ntype'
    " \ },
    " \ 'scope2kind' : {
        " \ 'ctype' : 't',
        " \ 'ntype' : 'n'
    " \ },
    " \ 'ctagsbin'  : 'gotags',
    " \ 'ctagsargs' : '-sort -silent'
" \ }


" 去除taglist =>原因: 使用tagbar和ctrlp-funky可以直接快速跳转函数和变量位置,taglist有些多余
" ################### 语言相关 ###################
" For tmux navigator Ctrl-hjkl
Plug 'christoomey/vim-tmux-navigator'

" ################### 语言相关 ###################

Plug 'thinca/vim-quickrun'
let g:quickrun_config = {
\   "_" : {
\       "outputter" : "message",
\   },
\}

let g:quickrun_no_default_key_mappings = 1
nmap <Leader>r <Plug>(quickrun)
map <F10> :QuickRun<CR>

" ###### Python #########
" for python.vim syntax highlight
Plug 'hdima/python-syntax'
let python_highlight_all = 1

" ###### Golang #########
Plug 'fatih/vim-go'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
nnoremap <leader>ga :GoAlternate<cr>
vnoremap <leader>ga :GoAlternate<cr>
nnoremap <leader>gd :GoDoc<cr>
vnoremap <leader>gd :GoDoc<cr>
nnoremap <leader>gi :GoInfo<cr>
vnoremap <leader>gi :GoInfo<cr>
" let g:go_def_mode = 'guru'

autocmd FileType go nmap <Leader>i <Plug>(go-info)

" 1.install golang and install gocode 'go get github.com/nsf/gocode'
" 2.make sure gocode in your path: `which gocode` (add $GOPATH/bin to you $PATH)
Plug 'Blackrush/vim-gocode'

" ###### Ruby #########
Plug 'vim-ruby/vim-ruby'
"Bundle 'nelstrom/vim-textobj-rubyblock'

" 有bug, 和当前有冲突, 尚未解决, 不要打开
" Bundle 'tpope/vim-endwise'
" Bundle 'tpope/vim-rails'


" ###### Markdown #########
Plug 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1

" https://github.com/suan/vim-instant-markdown
" npm -g install instant-markdown-d
" Bundle 'suan/vim-instant-markdown'
" let g:instant_markdown_slow = 1
" let g:instant_markdown_autostart = 0
" map <F12> :InstantMarkdownPreview<CR>

" ###### HTML/JS/JQUERY/CSS #########

" for javascript  注意: syntax这个插件要放前面
Plug 'jelera/vim-javascript-syntax'
Plug 'pangloss/vim-javascript'
let g:html_indent_inctags = "html,body,head,tbody"
let g:html_indent_script1 = "inc"
let g:html_indent_style1 = "inc"

" ###### emmet HTML complete #########
" Bundle "mattn/emmet-vim"

" ###### vim.less : less 自动更新##########
" Bundle 'groenewege/vim-less'
" autocmd BufWritePost *.less :!lessc % > %:p:r.css

" ###### Jinja2 #########
Plug 'Glench/Vim-Jinja2-Syntax'

" ##### Puppet Syntax ########
Plug 'godlygeek/tabular'

" ##### indent guide ########
" Plug 'nathanaelkane/vim-indent-guides'
Plug 'Yggdroot/indentLine'
let g:indentLine_char = '|'
let g:indentLine_enabled = 0
nnoremap <leader>ig :IndentLinesToggle <CR>

" ###### nginx #########
Plug 'evanmiller/nginx-vim-syntax'

Plug 'liaoishere/vim-puppet'

" ###### tabline ######
Plug 'mkitt/tabline.vim'

if !has('nvim')
    Plug 'ConradIrwin/vim-bracketed-paste'
endif

Plug 'sjl/gundo.vim'

" #####  incsearch #####
Plug 'haya14busa/incsearch.vim'
map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)

" #### vim-signature ####
Plug 'kshenoy/vim-signature'

" #### Ag & Ack ####
Plug 'Numkil/ag.nvim'
" Plug 'mileszs/ack.vim'
Plug 'rizzatti/dash.vim'


" ####### temp #######
" python code format
autocmd FileType python nnoremap <leader>y :0,$!yapf<Cr>

call plug#end()

filetype plugin on    " required
